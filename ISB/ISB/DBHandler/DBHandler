
#import "DBHandler.h"
#import "CLocation.h"
#import "CTrip.h"
#include "CTripInfo.h"
#import "NSDateFormatter+SH.h"
#import "CAppController.h"
#import "NSString+SH.h"
#define thisFileA eLADataBaseQuery

@implementation DBHandler

+(DBHandler*)sharedDatabase{
	static DBHandler *sharedDatabaseInstance;
	@synchronized(self){
		if(!sharedDatabaseInstance){
			sharedDatabaseInstance = [[DBHandler alloc]init];
		}
	}
	return sharedDatabaseInstance;
}

// Gets the path of the deployed database copy.
+(NSString*)getDBPath
{
    SHLogs(eLLDebugInfo, thisFileA, @"DBHandler-->getDBPath-START");
	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
	NSString *documentsDirPath = [paths objectAtIndex:0];
	NSString *dbPath = [documentsDirPath stringByAppendingPathComponent:@"AutoGearDB.sqlite"];
    SHLogs(eLLDebugInfo, thisFileA, @"DBHandler-->getDBPath-End");
	return dbPath;
}

// Returns YES if database if already copied to documents, NO otherwise
+(BOOL)dbAlreadyCopied
{
  return [[NSFileManager defaultManager] fileExistsAtPath:[DBHandler getDBPath]];
}

// Checks if database has already been copied to our working area and copies if didn't

+(void)copyDatabaseIfNeeded{
	BOOL dbExists = [DBHandler dbAlreadyCopied];
	if(!dbExists)
    {
		NSString *dataBasePath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@"AutoGearDB.sqlite"];
		[[NSFileManager defaultManager] copyItemAtPath:dataBasePath toPath:[DBHandler getDBPath] error:NULL];
	}
    else
    {
        SHLogs(eLLDebugInfo, thisFileA, @"db Already Copied");

    }
}

// Runs the query except SELECT
-(BOOL)runQuery:(NSString*)theQuery
{
    SHLogs(eLLDebugInfo, thisFileA, @"Save Query = %@",theQuery);

	sqlite3 *database;
    NSString *dbPath = [DBHandler getDBPath];
	int result = sqlite3_open([dbPath UTF8String], &database);
	if(result != SQLITE_OK) sqlite3_close(database);
    else{
		int returnValue = sqlite3_exec(database, [theQuery UTF8String],NULL, NULL, NULL);
		if (returnValue != SQLITE_OK) {
            SHLogs(eLLErrors, thisFileA, @"*** Query %@ failed with returncode= %d ***",theQuery, returnValue);

            sqlite3_close(database);
	        return NO;
		}
		sqlite3_close(database);
		return YES;
    }
    return NO;
}
//////////////////////////////////////////////////////////////////////////
+(CGFloat)calculateDistanceBetweenSource:(CLLocationCoordinate2D)firstCoords andDestination:(CLLocationCoordinate2D)secondCoords
{
    
    // this radius is in KM => if miles are needed it is calculated during setter of Place.distance
    
    double nRadius = 6371;
    
    // Get the difference between our two points
    
    // then convert the difference into radians
    
    double nDLat = (firstCoords.latitude - secondCoords.latitude)* (M_PI/180);
    double nDLon = (firstCoords.longitude - secondCoords.longitude)* (M_PI/180);
    
    double nLat1 =  secondCoords.latitude * (M_PI/180);
    double nLat2 =  secondCoords.latitude * (M_PI/180);
    
    double nA = pow ( sin(nDLat/2), 2 ) + cos(nLat1) * cos(nLat2) * pow ( sin(nDLon/2), 2 );
    
    double nC = 2 * atan2( sqrt(nA), sqrt( 1 - nA ));
    
    double nD = nRadius * nC;
        
    return nD; // converts to miles or not (if en_) => implicit in method
}
//////////
#pragma mark -
#pragma mark Company
// Saves Location
-(BOOL)saveLocation:(CLocation*)inLocationData
{
    BOOL toReturn = NO;
    double  lat =  inLocationData.CurrLocation.coordinate.latitude;
    double  longt =  inLocationData.CurrLocation.coordinate.longitude;
    NSString *dateStr = [NSString stringWithString: inLocationData.DateString];
    NSString *aAddress  = [NSString stringWithString: inLocationData.CurrAddress];
    double distance = inLocationData.Distance;
    int aTripId = inLocationData.TripId;
    NSString *aUserId = inLocationData.UserId;
    
    if ([aAddress  length] <= 0)
        return toReturn;
    if (![self getLocation: inLocationData])
    {
        // double lat = [[inLocationData objectAtIndex:0]];
        NSString *query = [NSString stringWithFormat:@"INSERT INTO TLocations VALUES (%f, %f,\"%@\",\"%@\",%f,%d,%d,\"%@\")",lat,longt,dateStr,aAddress,distance,inLocationData.SaveFalg,aTripId,aUserId];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;
}
//changed21-6
-(BOOL)saveTripInfo:(CTripInfo*)inTripInfoData
{
    BOOL toReturn = NO;
    
    if (!inTripInfoData)
        return toReturn;
    NSArray *aAllTripInfo =  [gAppController sortGivenTripsByStartDate:[self getLastTenTripInfo]];//[self getAllTripInfoIds];
    
    int coun  = [aAllTripInfo  count];
    if (coun == 10)
    {
        int aTripId =[[aAllTripInfo lastObject] TripId];
    
        [self deleteTripInfo:aTripId];
    }
    
    
    if (![self getTripInfo : inTripInfoData])
    {
        // double lat = [[inLocationData objectAtIndex:0]];
        NSString *query = [NSString stringWithFormat:@"INSERT INTO TTripInfo VALUES (%d, %d,\"%@\",\"%@\",%f,\"%@\",%f,%f,\"%@\",\"%@\",%f,%f,\"%@\")"
                           ,inTripInfoData.TripId,inTripInfoData.SaveFalg,inTripInfoData.UserId,inTripInfoData.SubscriptionId,inTripInfoData.Distance,inTripInfoData.StartDateTime,inTripInfoData.StartLocation.coordinate.latitude,inTripInfoData.StartLocation.coordinate.longitude,inTripInfoData.StartAddress,inTripInfoData.EndDateTime,inTripInfoData.EndLocation.coordinate.latitude,inTripInfoData.EndLocation.coordinate.longitude,inTripInfoData.EndAddress];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;

}
//end

-(BOOL)updateSaveFlagAndLocalTripIdInTripInfo:(int)inLocalTripId andSeverTripId: (int)inServerTripId userid:(NSString *)inUserId andSaveFlag :(BOOL)inSaveFlag
{
    BOOL toReturn = NO;
    
    if (inLocalTripId <= 0)
        return toReturn;
    
    // double lat = [[inLocationData objectAtIndex:0]];
    NSString *query = [NSString stringWithFormat:@"UPDATE TTripInfo SET saveFlag=%d , tripId =%d WHERE userId = \"%@\" and tripId = %d ",inSaveFlag,inServerTripId,inUserId,inLocalTripId];
    toReturn =  [self runQuery:query];
    
    return toReturn;
}

-(BOOL)updateSaveFlagAndLocalTripIdInLocations:(int)inLocalTripId andSeverTripId: (int)inServerTripId userid:(NSString *)inUserId andSaveFlag :(BOOL)inSaveFlag
{
    BOOL toReturn = NO;
    
    if (inLocalTripId <= 0)
        return toReturn;
    
    // double lat = [[inLocationData objectAtIndex:0]];
    NSString *query = [NSString stringWithFormat:@"UPDATE TLocations SET saveFlag=%d , tripId =%d WHERE userId = \"%@\" and tripId = %d ",inSaveFlag,inServerTripId,inUserId,inLocalTripId];
    toReturn =  [self runQuery:query];
    
    return toReturn;

}

-(BOOL)createTrip:(CTrip*)inTripInfo
{
    NSArray *aAllTripIds = [self getAllTripIds];
    //NSArray *aAllTripInfoIds = [self getAllTripInfoIds];
    NSArray *aAllTripInfo =  [gAppController sortGivenTripsByStartDate:[self getLastTenTripInfo]];//[self getAllTripInfoIds];

    int coun  = [aAllTripIds  count];
    if (coun == 10)
    {
        [self deleteTrip: [[aAllTripIds objectAtIndex:0] intValue]];
        
        [self deleteAllLocationOfTripId:[[aAllTripIds objectAtIndex:0] intValue]];
        
        //[self deleteTripInfo:[[aAllTripInfoIds objectAtIndex:0] intValue]];
    }
    coun = [aAllTripInfo count];
    
    if (coun == 10)
    {
        int aTripId =[[aAllTripInfo lastObject] TripId];
        
        [self deleteTripInfo:aTripId];
    }
    
    

    
    BOOL toReturn = NO;
    
    if (!inTripInfo)
    {
        SHLogs(eLLErrors, thisFileA, @"*** CTripInfo = nil *** ");

        return toReturn;
    }
    //  NSDateFormatter *dateformat = [NSDateFormatter RRUIDateFormatter];
    
    NSDateFormatter *dateformat = [NSDateFormatter RRWSDate2Formatter];
    NSString *dateStr =[NSString em] ;
    NSString *aServerId;
    NSString *aUserId;
    NSString *aSubscriptionId;
    if (inTripInfo.CreatedDate)
    {
        dateStr = [dateformat stringFromDate:inTripInfo.CreatedDate];

    }
    if (inTripInfo.ServerId)
    {
        aServerId  = [NSString stringWithString: inTripInfo.ServerId];

    }
    int aTripId  = inTripInfo.TripId;
    if (inTripInfo.UserId)
    {
        aUserId  = [NSString stringWithString: inTripInfo.UserId];

    }
    if (inTripInfo.SubscriptionId)
    {
        aSubscriptionId  = [NSString stringWithString: inTripInfo.SubscriptionId];

    }

    BOOL aSaveFlag  = inTripInfo.SaveFalg;
    

    NSString *query = [NSString stringWithFormat:@"INSERT INTO TTrips VALUES (%d,\"%@\",%d,\"%@\",\"%@\",\"%@\")",aTripId,aUserId,aSaveFlag,dateStr,aServerId,aSubscriptionId];
    toReturn =  [self runQuery:query];
    
    return toReturn;
}


#pragma mark -
// Delete all records of the table
-(void)emptyTable:(NSString*)tableName{
	NSString *query = [NSString stringWithFormat:@"DELETE FROM %@", tableName];
	[self runQuery:query];
}

-(BOOL) deleteTrip :(int)inTripId
{
    BOOL toReturn = NO;
    
    {
        NSString *query = [NSString stringWithFormat:@"DELETE FROM TTrips Where tripId=%d",inTripId];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;
}

-(BOOL)deleteAllLocationOfTripId:(int)inTripId
{
    BOOL toReturn = NO;
        
    {
        NSString *query = [NSString stringWithFormat:@"DELETE FROM TLocations Where tripId=%d",inTripId];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;
}


// Fetches MenuIds w.r.t. a location id
-(BOOL)getLocation:(CLocation *)inLocationData
{
    BOOL toReturn = NO;
    double  lat =  inLocationData.CurrLocation.coordinate.latitude;
    double  longt =  inLocationData.CurrLocation.coordinate.longitude;
    
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
		NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations WHERE latitude = %f and longitude = %f",lat,longt];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            toReturn = YES;
            break;
            
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return toReturn;
}

-(BOOL)getTripInfo:(CTripInfo *)inTripInfoData
{
    BOOL toReturn = NO;
    if (!inTripInfoData)
        return toReturn = YES;
    
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
		NSString *query = [NSString stringWithFormat:@"SELECT * FROM TripInfo WHERE tripid = %d",inTripInfoData.TripId];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
        
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            toReturn = YES;
            break;
            
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return toReturn;
}


-(NSArray *)getAllTripInfoIds
{
    NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK)
    {
		sqlite3_stmt *statement;
        
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TTripInfo ORDER BY rowid ASC "];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
        
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
            [resultSet addObject: [NSNumber numberWithInt:(int)sqlite3_column_int(statement, 0)]];
		}
		
        sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;

}

-(NSArray *)getTripInfoByTripId:(int)inTripId andUserId:(NSString *)inUserId
{
    NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK)
    {
		sqlite3_stmt *statement;
        
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TTripInfo WHERE tripId=%d AND userId=\"%@\"",inTripId,inUserId];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
        
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CTripInfo *aTripInfo = [[CTripInfo alloc] init];
            aTripInfo.TripId  = (int)sqlite3_column_int(statement,0);
            aTripInfo.SaveFalg = (int)sqlite3_column_int(statement,1);
            aTripInfo.UserId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];
            
            aTripInfo.SubscriptionId =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            aTripInfo.Distance = (double)sqlite3_column_double(statement,4);
            aTripInfo.StartDateTime = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 5)];
            
            CLLocationCoordinate2D aStartCoordinate;
            aStartCoordinate.latitude = (double)sqlite3_column_double(statement,6);
            aStartCoordinate.longitude = (double)sqlite3_column_double(statement,7);
            
            CLLocation *aStartlocation = [[CLLocation alloc] initWithLatitude:aStartCoordinate.latitude longitude:aStartCoordinate.longitude];
            
            aTripInfo.StartLocation = aStartlocation;
            [aStartlocation release]; aStartlocation = nil;
            
            aTripInfo.StartAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 8)];
            aTripInfo.EndDateTime = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 9)];
            
            CLLocationCoordinate2D aEndCoordinate;
            aEndCoordinate.latitude = (double)sqlite3_column_double(statement,10);
            aEndCoordinate.longitude = (double)sqlite3_column_double(statement,11);
            
            CLLocation *aEndlocation = [[CLLocation alloc] initWithLatitude:aEndCoordinate.latitude longitude:aEndCoordinate.longitude];
            
            aTripInfo.EndLocation = aEndlocation;
            [aEndlocation release]; aEndlocation = nil;
            
            aTripInfo.EndAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 12)];
            
            
			[resultSet addObject: aTripInfo];
            [aTripInfo release]; aTripInfo = nil;
		}
		
        sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;

}

-(BOOL) deleteTripInfo :(int)inTripId
{
    BOOL toReturn = NO;
    
    {
        NSString *query = [NSString stringWithFormat:@"DELETE FROM TTripInfo Where tripId=%d",inTripId];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;

}

-(BOOL) deleteTripInfoTripId :(int)inTripId andUserId:(NSString*)inUserId
{
    BOOL toReturn = NO;
    
    {
        NSString *query = [NSString stringWithFormat:@"DELETE FROM TTripInfo Where tripId=%d AND userId=\"%@\"",inTripId,inUserId];
        toReturn =  [self runQuery:query];
    }
    
    return toReturn;

}


-(NSArray *)getLastTenLocations
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
		NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations"];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CLocation *aLocation = [[CLocation alloc] init];
            CLLocationCoordinate2D aCoordinate;
            aCoordinate.latitude  = (double)sqlite3_column_double(statement,0);
            aCoordinate.longitude = (double)sqlite3_column_double(statement,1);
            
            CLLocation *aCurrLocation = [[CLLocation alloc] initWithLatitude:aCoordinate.latitude longitude:aCoordinate.longitude];
            
            aLocation.CurrLocation = aCurrLocation;
            aLocation.DateString =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];
            aLocation.CurrAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            aLocation.Distance = (double)sqlite3_column_double(statement,4);
            aLocation.SaveFalg = (double)sqlite3_column_double(statement,5);

            
			[resultSet addObject: aLocation];
            
            [aCurrLocation release]; aCurrLocation = nil;
            
            [aLocation release]; aLocation = nil;
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}

// getfirstRecord
-(NSArray *)getFirstRecord:(int)inTripId
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
        
        // First record
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations WHERE tripId=%d ORDER BY rowid ASC LIMIT 1 ",inTripId];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

        // Last record
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CLocation *aLocation = [[CLocation alloc] init];
            CLLocationCoordinate2D aCoordinate;
            aCoordinate.latitude  = (double)sqlite3_column_double(statement,0);
            aCoordinate.longitude = (double)sqlite3_column_double(statement,1);
            
            aLocation.DateString =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];
            aLocation.CurrAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            
            aLocation.Distance = (double)sqlite3_column_double(statement,4);
            aLocation.SaveFalg = (double)sqlite3_column_double(statement,5);
            
            // custome current location
            CLLocation *aCurrlocation = [[CLLocation alloc] initWithLatitude:aCoordinate.latitude longitude:aCoordinate.longitude];
            aLocation.CurrLocation = aCurrlocation;
            
            [aCurrlocation release]; aCurrlocation = nil;

			[resultSet addObject: aLocation];
            [aLocation release]; aLocation = nil;
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}

// getlastRecord

-(NSArray *)getLastRecord:(int)inTripId
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
		  // First record
        
        // Last record
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations WHERE tripId=%d ORDER BY rowid DESC LIMIT 1",inTripId];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CLocation *aLocation = [[CLocation alloc] init];
            CLLocationCoordinate2D aCoordinate;
            aCoordinate.latitude  = (double)sqlite3_column_double(statement,0);
            aCoordinate.longitude = (double)sqlite3_column_double(statement,1);
            
            aLocation.DateString =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];
            aLocation.CurrAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            
            aLocation.Distance = (double)sqlite3_column_double(statement,4);
            aLocation.SaveFalg = (double)sqlite3_column_double(statement,5);
            
            // custome current location 
            CLLocation *aCurrlocation = [[CLLocation alloc] initWithLatitude:aCoordinate.latitude longitude:aCoordinate.longitude];
            aLocation.CurrLocation = aCurrlocation;
            
            [aCurrlocation release]; aCurrlocation = nil;
            
			[resultSet addObject: aLocation];
            [aLocation release]; aLocation = nil;
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}

-(int)getTotalRecordCount :(NSString *)inTable;
{
    int toReturn = 0;
    
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
		  
        NSString *query = [NSString stringWithFormat:@"SELECT COUNT(rowid) FROM \"%@\"",inTable];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            toReturn  = (int)sqlite3_column_int(statement,0);
           
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
    
    return toReturn;
}


-(NSArray *)getCurrentTrip
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK)
    {
		sqlite3_stmt *statement;
		//NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations"];
        
        // First record
        // NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations ORDER BY rowid ASC LIMIT 1"];
        
        // Last record
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TTrips  ORDER BY rowid DESC LIMIT 1"];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CTrip *aLastTrip = [[CTrip alloc] init];
            
            
            aLastTrip.TripId = (int)sqlite3_column_int(statement, 0);
            aLastTrip.UserId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 1)];
            
           // aLastTrip.SaveFalg = (int)sqlite3_column_int(statement,2);
            aLastTrip.CreatedDate = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            aLastTrip.ServerId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 4)];
            aLastTrip.SubscriptionId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 5)];

            
			[resultSet addObject: aLastTrip];
            [aLastTrip release]; aLastTrip = nil;
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}

-(NSArray *)getAllTripIds
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK)
    {
		sqlite3_stmt *statement;
        
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TTrips"];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);

		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		
        while(sqlite3_step(statement) == SQLITE_ROW)
        {                        
            [resultSet addObject: [NSNumber numberWithInt:(int)sqlite3_column_int(statement, 0)]];
		}
		
        sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}

-(NSArray *)getLastTenTripInfo
{
	NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK)
    {
		sqlite3_stmt *statement;
        
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TTripInfo"];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
        
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		
        while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CTripInfo *aTripInfo = [[CTripInfo alloc] init];
            aTripInfo.TripId  = (int)sqlite3_column_int(statement,0);
            aTripInfo.SaveFalg = (int)sqlite3_column_int(statement,1);
            aTripInfo.UserId = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];

            aTripInfo.SubscriptionId =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            aTripInfo.Distance = (double)sqlite3_column_double(statement,4);            
            aTripInfo.StartDateTime = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 5)];
           
            CLLocationCoordinate2D aStartCoordinate;
            aStartCoordinate.latitude = (double)sqlite3_column_double(statement,6);
            aStartCoordinate.longitude = (double)sqlite3_column_double(statement,7);
           
            CLLocation *aStartlocation = [[CLLocation alloc] initWithLatitude:aStartCoordinate.latitude longitude:aStartCoordinate.longitude];
           
            aTripInfo.StartLocation = aStartlocation;
            [aStartlocation release]; aStartlocation = nil;
            
            aTripInfo.StartAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 8)];
            aTripInfo.EndDateTime = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 9)];
            
            CLLocationCoordinate2D aEndCoordinate;
            aEndCoordinate.latitude = (double)sqlite3_column_double(statement,10);
            aEndCoordinate.longitude = (double)sqlite3_column_double(statement,11);
            
            CLLocation *aEndlocation = [[CLLocation alloc] initWithLatitude:aEndCoordinate.latitude longitude:aEndCoordinate.longitude];
            
            aTripInfo.EndLocation = aEndlocation;
            [aEndlocation release]; aEndlocation = nil;
            
            aTripInfo.EndAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 12)];

            
			[resultSet addObject: aTripInfo];
            [aTripInfo release]; aTripInfo = nil;
		}
		
        sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;
}


-(NSArray *)getAllLocationsRecord:(int)inTripId
{
    NSMutableArray *resultSet = [[[NSMutableArray alloc]init] autorelease];
	sqlite3 *database;
	NSString *dbPath = [DBHandler getDBPath];
	if(sqlite3_open([dbPath UTF8String], &database) == SQLITE_OK){
		sqlite3_stmt *statement;
        // First record
        
        // Last record
        NSString *query = [NSString stringWithFormat:@"SELECT * FROM TLocations WHERE tripId=%d ORDER BY rowid ASC",inTripId];
        SHLogs(eLLDebugInfo, thisFileA, @"Select Query is generated %@", query);
		sqlite3_prepare_v2(database, [query UTF8String], -1, &statement, nil);
		while(sqlite3_step(statement) == SQLITE_ROW)
        {
            CLocation *aLocation = [[CLocation alloc] init];
            CLLocationCoordinate2D aCoordinate;
            aCoordinate.latitude  = (double)sqlite3_column_double(statement,0);
            aCoordinate.longitude = (double)sqlite3_column_double(statement,1);
            
            aLocation.DateString =  [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 2)];
            aLocation.CurrAddress = [NSString stringWithUTF8String:(char *)sqlite3_column_text(statement, 3)];
            
            aLocation.Distance = (double)sqlite3_column_double(statement,4);
            aLocation.SaveFalg = (double)sqlite3_column_double(statement,5);
            
            // custome current location
            CLLocation *aCurrlocation = [[CLLocation alloc] initWithLatitude:aCoordinate.latitude longitude:aCoordinate.longitude];
            aLocation.CurrLocation = aCurrlocation;
            
            [aCurrlocation release]; aCurrlocation = nil;
            
			[resultSet addObject: aLocation];
            [aLocation release]; aLocation = nil;
		}
		sqlite3_finalize(statement);
		sqlite3_close(database);
	}
	return resultSet;

}




-(void)dealloc
{
	
	[super dealloc];
}
@end
